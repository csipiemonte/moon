<?xml version="1.0" encoding="UTF-8"?>

<!-- ##################################################### -->
<!-- # build.xml file per compilazione e generazione     # -->
<!-- # del pacchetto per il rilascio dell'applicazione.  # -->
<!-- #                                                   # -->
<!-- # Per una lista completa dei tasks eseguibili usare # -->
<!-- # l'argomento di ant -projecthelp quando si         # -->
<!-- # richiama questo build.xml.                        # -->
<!-- ##################################################### -->

<project basedir="."
         default="default"
         name="moonsrv"
         xmlns:ivy="antlib:fr.jayasoft.ivy.ant" >

	<description>Build file per il progetto: [moonsrv]</description>

	<!-- -->
	<echo message="Loading build properties..." />
	<property file="buildfiles/build.properties" />
	<property file="buildfiles/build.locale.properties" />
	<property file="buildfiles/${target}.properties" />

	<!-- -->
	<path id="library.ref">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>




	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: init                                              # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="init" description="Inizializza lo script Ant.">
		<tstamp />
		<condition property="target" value="dev">
			<equals arg1="${target}" arg2="$${target}" />
		</condition>
		<mkdir dir="${build}/classes" />
		<mkdir dir="${temp}/${target}/${earLib}" />
		<mkdir dir="${build}/archives/${target}" />
		<mkdir dir="${dist}/${target}" />
		<mkdir dir="${build}/javadoc" />
		<mkdir dir="${build}/jsp" />
		<mkdir dir="${build}/cache" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: default                                           # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="default"
	        description="Eseguire il build per l'environment
	                     specificato a linea di comando con
	                     -Dtarget=${target} o per tutti gli
	                     environment (se non specificato).">

		<condition property="first-call" value="distribution">
			<not>
				<equals arg1="${target}" arg2="$${target}" />
			</not>
		</condition>

		<condition property="first-call" value="all-targets">
			<equals arg1="${target}" arg2="$${target}" />
		</condition>

		<echo message="server: ${server}" />
		<echo message="target: ${target}" />
		<echo message="first-call: ${first-call}" />

		<antcall target="clean-all" />
		<antcall target="${first-call}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [DISTRIB]: all-targets                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="all-targets"
	        description="Esegue il build per le varie distribuzioni in sequenza.">
		<!--PROTECTED REGION ID(R-1748880042) ENABLED START-->
		<!-- Inserire le varie distribuzioni di cui si intende eseguire il build. -->
		<antcall target="distribution" />
		<!--PROTECTED REGION END-->
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [DISTRIB]: distribution                                   # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="distribution" depends="package-all"
	        description="Costruisce il tar per la distribuzione." >
		<echo message="====== Creating distribution for ${target} ..."/>
		<echo message="====== Basedir: ${build}/archives/${target} ..."/>
		<!--PROTECTED REGION ID(R-64293809) ENABLED START-->
		<!-- inserire qui eventuali statement antcall aggiuntivi da invocare
		     nel processo di distribuzione del tar -->
		<!--PROTECTED REGION END-->
		<tar tarfile="${dist}/${target}/${dist-file-name}.tar"
		     basedir="${build}/archives/${target}"
		     includes="*.ear,*.xml">
			<tarfileset dir="buildfiles">
				<include name="readme.txt"/>
				<!--PROTECTED REGION ID(R-1413323135) ENABLED START-->
				<!-- inserire qui eventuali statement per includere oggetti extra nel tar -->
				<!--PROTECTED REGION END-->
			</tarfileset>
		</tar>
		<antcall target="echotime" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: resolve-dependencies                               # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="resolve-dependencies"
	        description="carica le librerie dal repository remoto">
		<if>
			 <equals arg1="${ivy}" arg2="true" />
			 <then>	
			 		<ivy:configure file="${basedir}/buildfiles/ivyconf.xml" />
			 		<ivy:resolve file="${basedir}/buildfiles/ivy.xml" />
			 </then>
			 <else> 
				<echo message="Ivy disabilitato" />
			</else>
		</if>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: internal target: load-dependencies                 # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="load-dependencies"
	        depends="resolve-dependencies"
	        description="Risolve le dipendenze esterne.">
		<if>
			<equals arg1="${ivy}" arg2="true" />
			<then>	
				<ivy:retrieve pattern="${basedir}/lib/[artifact].[type]" />
				<copy todir="lib" overwrite="true" >
					<fileset dir="${conf}/lib-tmp" includes="${ear-libs-tmp-filter}" />
				</copy>
			</then>
			<else> 
				<echo message="Ivy disabilitato" />
			</else>
		</if>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: compile-all                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="compile-all" depends="init,load-dependencies"
	        description="Compila tutti i sorgenti.">

		<echo message="===> Target: ${target}" />

		<!-- compilazione dei sorgenti -->
		<javac srcdir="${src}/java" destdir="${build}/classes"
		       optimize="on" deprecation="on"
		       compiler="modern"
		       debug="on" debuglevel="lines,vars,source">
			<classpath refid="library.ref" />
		</javac>

		<!-- copia dei sorgenti -->
		<copy todir="${build}/classes">
			<fileset dir="${src}/java" excludes="**/*.java*,**/*.jbx*" />
		</copy>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: environment-recreate                              # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="environment-recreate"
	        description="Ricrea l&apos;environment di configurazione per il target corrente (per applicare le sostituzionidelle variabili).">
		<mkdir dir="build/temp/conf" />
			<copy todir="build/temp/conf" overwrite="true">
		<fileset dir="${conf}" />
		</copy>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: environment-config                                # -->
	<!-- #         Gestire qui i  replace delle variabile d'ambiente # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="environment-config"
	        description="Predispone le configurazioni dipendenti dall&apos;ambiente." >

		<copy todir="${build}/classes">
			<fileset file="${conf}/ear/ws*.properties" />
		</copy>
	  
		<!-- Gestione replace delle variabile d'ambiente create dal generatore -->

		
		<!-- gestire qui i  replace delle proprie variabili d'ambiente -->
		<replace dir="${build}/temp/conf/web/" token="@DATA_SOURCE_NAME" value="${DATA_SOURCE_NAME}"/>
		<replace dir="${build}/temp/conf/web/" token="@spring.profiles.active@" value="${spring.profiles.active}"/>

	    <tstamp>
	      <format property="BUILD_TIME" pattern="yyyy-MM-dd HH:mm:ss:sss zzz" locale="it,ITA"/>
	    </tstamp>
		<replace file="${build}/temp/conf/ear/env.properties">				
			<replacefilter token="@version@" value="${version}"/>
			<replacefilter token="@build.time@" value="${BUILD_TIME}"/>
			<replacefilter token="@target@" value="${target}"/>
			
			<replacefilter token="@moonprn.endpoint@" value="${MOONPRN_URL}"/>
			<replacefilter token="@moonprn.username@" value="${MOONPRN_USR}"/>
			<replacefilter token="@moonprn.password@" value="${MOONPRN_PWD}"/>
			<replacefilter token="@moonprn.timeout@" value="${MOONPRN_TIMEOUT}"/>
				
			<replacefilter token="@apiman.endpoint@" value="${APIMAN_URL}"/>
			<replacefilter token="@apiman.consumerKey@" value="${APIMAN_CONSUMERKEY}"/>
			<replacefilter token="@apiman.consumerSecret@" value="${APIMAN_CONSUMERSECRET}"/>
			<replacefilter token="@apiman.timeout@" value="${APIMAN_TIMEOUT}"/>
			
			<replacefilter token="@apimint.endpoint@" value="${APIMINT_URL}"/>
			<replacefilter token="@apimint.timeout@" value="${APIMINT_TIMEOUT}"/>
			<replacefilter token="@apimint.consumerKey@" value="${APIMINT_CONSUMERKEY}"/>
			<replacefilter token="@apimint.consumerSecret@" value="${APIMINT_CONSUMERSECRET}"/>
			<replacefilter token="@apimint.sandbox.consumerKey@" value="${APIMINT_SANDBOX_CONSUMERKEY}"/>
			<replacefilter token="@apimint.sandbox.consumerSecret@" value="${APIMINT_SANDBOX_CONSUMERSECRET}"/>
			<replacefilter token="@covid.apimint.consumerKey@" value="${COVID_APIMINT_CONSUMERKEY}"/>
			<replacefilter token="@covid.apimint.consumerSecret@" value="${COVID_APIMINT_CONSUMERSECRET}"/>
			
			<replacefilter token="@apimonit.apimint.url@" value="${APIMONIT_APIMINT_URL}"/>
			<replacefilter token="@apimonit.apimint.consumerKey@" value="${APIMONIT_APIMINT_CONSUMERKEY}"/>
			<replacefilter token="@apimonit.apimint.consumerSecret@" value="${APIMONIT_APIMINT_CONSUMERSECRET}"/>
			
			<replacefilter token="@demografia.anpr.clientProfile.cittadino@" value="${demografia.anpr.clientProfile.cittadino}"/>
			<replacefilter token="@demografia.anpr.clientProfile.operatore@" value="${demografia.anpr.clientProfile.operatore}"/>
			<replacefilter token="@demografia.anpr.clientProfile.operatore.auth@" value="${demografia.anpr.clientProfile.operatore.auth}"/>
			<replacefilter token="@demografia.anpr.clientProfile.naz.cittadino@" value="${demografia.anpr.clientProfile.naz.cittadino}"/>
			<replacefilter token="@demografia.anpr.clientProfile.naz.operatore@" value="${demografia.anpr.clientProfile.naz.operatore}"/>
			
			<replacefilter token="@toponomastica.appId@" value="${toponomastica.appId}"/>
			<replacefilter token="@toponomastica.applogic.endpoint@" value="${TOPO_APPLOGIC_URL}"/>
			<replacefilter token="@toponomastica.applogic.username@" value="${TOPO_APPLOGIC_USR}"/>
			<replacefilter token="@toponomastica.applogic.password@" value="${TOPO_APPLOGIC_PWD}"/>
			<replacefilter token="@toponomastica.applogic.timeout@" value="${TOPO_APPLOGIC_TIMEOUT}"/>
			
			<replacefilter token="@notify.endpoint@" value="${NOTIFY_URL}"/>
			<replacefilter token="@notify.preferences.endpoint@" value="${NOTIFY_PREFERENCES_URL}"/>
			<replacefilter token="@notify.status.endpoint@" value="${NOTIFY_STATUS_URL}"/>
			
			<replacefilter token="@notify.token@" value="${NOTIFY_TOKEN}"/>
			<replacefilter token="@notify.token_push@" value="${NOTIFY_TOKEN_PUSH}"/>
			<replacefilter token="@notify.service.name@" value="${NOTIFY_SERVICE_NAME}"/>
			
			<replacefilter token="@mail.suject.prefix.ambiente@" value="${mail.suject.prefix.ambiente}"/>

			<replacefilter token="@mail.smtp.host@" value="${mail.smtp.host}"/>
			<replacefilter token="@mail.smtp.port@" value="${mail.smtp.port}"/>
			<replacefilter token="@mail.smtp.from@" value="${mail.smtp.from}"/>			
			<replacefilter token="@mail.smtp.connectiontimeout@" value="${mail.smtp.connectiontimeout}"/>
			<replacefilter token="@mail.smtp.timeout@" value="${mail.smtp.timeout}"/>
			<replacefilter token="@mail.smtp.auth@" value="${mail.smtp.auth}"/>
			<replacefilter token="@mail.smtp.auth.username@" value="${mail.smtp.auth.username}"/>
			<replacefilter token="@mail.smtp.auth.password@" value="${mail.smtp.auth.password}"/>

			<replacefilter token="@mail.smtps.host@" value="${mail.smtps.host}"/>
			<replacefilter token="@mail.smtps.port@" value="${mail.smtps.port}"/>
			<replacefilter token="@mail.smtps.from@" value="${mail.smtps.from}"/>			
			<replacefilter token="@mail.smtps.connectiontimeout@" value="${mail.smtps.connectiontimeout}"/>
			<replacefilter token="@mail.smtps.timeout@" value="${mail.smtps.timeout}"/>
			<replacefilter token="@mail.smtps.auth@" value="${mail.smtps.auth}"/>
			<replacefilter token="@mail.smtps.auth.username@" value="${mail.smtps.auth.username}"/>
			<replacefilter token="@mail.smtps.auth.password@" value="${mail.smtps.auth.password}"/>
						
			<replacefilter token="@ftp.server@" value="${ftp.server}"/>
			<replacefilter token="@ftp.port@" value="${ftp.port}"/>
			<replacefilter token="@ftp.user@" value="${ftp.user}"/>
			<replacefilter token="@ftp.password@" value="${ftp.password}"/>

			<replacefilter token="@protocollo.stardas.wsdl@" value="${PRT_STARDAS_WSDL_URL}"/>
			<replacefilter token="@protocollo.stardas.apimint.path@" value="${PRT_STARDAS_APIMINT_PATH}"/>

			<replacefilter token="@wf.cosmo.apimint.endpoint@" value="${WF_COSMO_APIMINT_URL}"/>
			<replacefilter token="@wf.cosmo.applogic.endpoint@" value="${WF_COSMO_APPLOGIC_URL}"/>
			<replacefilter token="@wf.cosmo.applogic.username@" value="${WF_COSMO_APPLOGIC_USR}"/>
			<replacefilter token="@wf.cosmo.applogic.password@" value="${WF_COSMO_APPLOGIC_PWD}"/>
			<replacefilter token="@wf.cosmo.applogic.timeout@" value="${WF_COSMO_APPLOGIC_TIMEOUT}"/>
			
			<replacefilter token="@ts.troubleticketing.use.sandbox@" value="${TS_TROUBLETICKETING_USE_SANDBOX}"/>
			<replacefilter token="@ts.troubleticketing.apimint.path@" value="${TS_TROUBLETICKETING_APIMINT_PATH}"/>
			<replacefilter token="@ts.otrs.endpoint@" value="${ts.otrs.endpoint}"/>
			<replacefilter token="@ts.otrs.username@" value="${ts.otrs.username}"/>
			<replacefilter token="@ts.otrs.password@" value="${ts.otrs.password}"/>
			
			<replacefilter token="@moonfo.jms.name@" value="${MOONFO_JMS_NAME}"/>
			
			<replacefilter token="@epay.iuv.applogic.endpoint@" value="${EPAY_IUV_APPLOGIC_URL}"/>
			<replacefilter token="@epay.iuv.applogic.username@" value="${EPAY_IUV_APPLOGIC_USR}"/>
			<replacefilter token="@epay.iuv.applogic.password@" value="${EPAY_IUV_APPLOGIC_PWD}"/>
			<replacefilter token="@epay.iuv.applogic.timeout@" value="${EPAY_IUV_APPLOGIC_TIMEOUT}"/>
	
			<replacefilter token="@audit.id.app@" value="${audit.id.app}"/>
			<replacefilter token="@spring.profiles.active@" value="${spring.profiles.active}"/>
			<replacefilter token="@tmp.path.fs@" value="${tmp.path.fs}"/>
			
			<replacefilter token="@doqui.index.endpoint@" value="${doqui.index.endpoint}"/>
			<replacefilter token="@doqui.index.tenant@" value="${doqui.index.tenant}"/>
			<replacefilter token="@doqui.index.password@" value="${doqui.index.password}"/>
			<replacefilter token="@doqui.index.fruitore@" value="${doqui.index.fruitore}"/>
			<replacefilter token="@doqui.index.root@" value="${doqui.index.root}"/>

			<replacefilter token="@maggioli.prt.soap.endpoint@" value="${maggioli.prt.soap.endpoint}"/>
			
			<replacefilter token="@praedi.endpoint@" value="${PRAEDI_URL}"/>
			<replacefilter token="@praedi.username@" value="${PRAEDI_USR}"/>
			<replacefilter token="@praedi.password@" value="${PRAEDI_PWD}"/>
			<replacefilter token="@praedi.ente@" value="${PRAEDI_ENTE}"/>
			<replacefilter token="@praedi.method@" value="${PRAEDI_METHOD}"/>
			
		</replace>
			
		
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-all                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-all"
	        description="Esegue il packaging di ogni componente del prodotto">
		<antcall target="package-ear" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-ear                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-ear"
            depends="environment-recreate, environment-config, compile-all, package-commons-moon-jar, package-commons-jar, 
                     package-all-ws-wars"
            description="costruisce l&apos;ear">

		<!-- librerie infrastrutturali o client di servizi fruiti -->
		<copy todir="${temp}/${target}/${earLib}">
			<fileset dir="${lib}" includes="${ear-libs-filter} ${ear-custom-libs-filter}" />
			<fileset dir="${build}/archives/${target}" includes="*common*.jar" />
			<fileset dir="${conf}/lib-tmp" includes="${ear-libs-tmp-filter}" />
		</copy>

		<ear appxml="${temp}/conf/ear/application.xml"
		     destfile="${build}/archives/${target}/${ear-file-name}.ear">
			<fileset dir="${build}/archives/${target}" includes="*.jar,*.war" excludes="*client*.jar,*common*.jar" />
			<fileset dir="${temp}/${target}">
				<include name="**/*" />
			</fileset>
			<metainf dir="${temp}/conf/ear/" includes="jboss-deployment-structure.xml" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${DSTAMP}" />
				<attribute name="Target" value="${target}" />
				<attribute name="Appl-Version" value="${version}" />
			</manifest>
		</ear>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-all-ws-wars                                # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-all-ws-wars"
	        description="Costruisce i war di tutti i web services">
		<!-- richiamo costruzione war backend REST  -->
		<antcall target="_package-ws-war">
			<param name="component.name" value="moonsrv"/>
			<param name="service.name" value="be"/>
			<param name="binding.code" value="rest"/>
			<param name="service.type" value="appl"/>
		</antcall>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: _package-ws-war                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="_package-ws-war"
	        description="Costruisce il war per un singolo web service">
		<!-- prende in input i parametri: component.name, service.name, binding.code, service.type, service.ver (deve essere a 2 cifre!!!) -->

        
				<war destfile="${build}/archives/${target}/${service.type}-${service.name}-${binding.code}.war"
				     webxml="${temp}/conf/web/${service.name}/${binding.code}/WEB-INF/web.xml"
				     roundup="false">
					<webinf dir="${temp}/conf/web/${service.name}/${binding.code}/WEB-INF/">
						<include name="*.xml" />
						<include name="*.properties" />
						<include name="/classes/*.properties" />
					</webinf>

					<classes dir="${build}/classes">
						<!-- <include name="it/csi/*/moonsrv/business/${service.name}/**"/> -->
						 <include name="it/csi/*/moonsrv/**"/>
					</classes>
		
					<classes dir="${temp}/conf/web/${service.name}/${binding.code}/WEB-INF/classes">
						<include name="*.xml"/>
				    </classes>
					
					<classes dir="${temp}/conf/ear">
						<include name="env.properties"/>
				    </classes>
					
					<!-- Resources image per email o altro -->
					<classes dir="/${src}/resources">
						<include name="**"/>
				    </classes>	
					
					<lib dir="${lib}" includes="*" 
						excludes="${war-exclude-libs-filter}, ${war-exclude-custom-libs-filter}" />
				
					<!-- se sono presenti risorse web statiche vengono inserite nel pacchetto
					     es. distribuizone webpack gia' buildata della parte client di una 
					     Single Page Application -->
					<fileset dir="${src}/web/${service.name}/${binding.code}" includes="**"></fileset>
					<manifest>
						<attribute name="Built-By" value="${user.name}" />
						<attribute name="Built-Date" value="${DSTAMP}" />
						<attribute name="Target" value="${target}" />
						<attribute name="Appl-Version" value="${version}" />
						<attribute name="Dependencies" value="org.apache.ws.security, org.apache.cxf export" />
					</manifest>
				</war>

	</target>
	

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-commons-jar                                # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-commons-jar" description="Genera il jar per le classi comuni.">
		<jar destfile="${build}/archives/${target}/moonsrv-common.jar"
		     basedir="${build}/classes"
		     includes="it/csi/moon/moonsrv/business/**,
		               it/csi/moon/moonsrv/integration/**,
		               it/csi/moon/moonsrv/util/**">

			<exclude name="it/csi/moon/moonsrv/business/be/**" />
			<exclude name="it/csi/moon/moonsrv/integration/be/**" />

			<!--Copio i file di servizio mockup -->
			<zipfileset dir="${service}" includes="*.json" />
		</jar>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-all                                        # -->
	<!-- ############################################################# -->
	<!-- nota: non cancella la directory "dist" appositamente: v. STDMDD-495.
	per ripulire anche la "dist" richiamare esplicitamente il target "clean-dist" -->
	<!-- -->
	<target name="clean-all" description="Rimuove tutte le cartelle temporanee."
	        depends="clean-archives, clean-cache, clean-classes, clean-javadoc, clean-jsp, clean-temp" />

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-cache                                      # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-cache"
	        description="Rimuove la cartella di cache di Ivy e la lib.">
		<if>
		 <equals arg1="${ivy}" arg2="true" />
		 <then>	
			<delete dir="${build}/cache" failonerror="no" />
			<delete dir="${lib}" failonerror="no" />
		 </then>
			<else> 
				<echo message="Ivy disabilitato" />
			</else>
			</if>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-temp                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-temp"
	        description="Rimuove la cartella dei files temporanei di build.">
		<delete dir="${temp}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-archives                                  # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-archives"
	        description="Rimuove la cartella degli archivi (war, ear, ...).">
		<delete dir="${build}/archives" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-dist                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-dist"
	        description="Rimuove la cartella delle distribuzioni.">
		<delete dir="${dist}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-classes                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-classes"
	        description="Rimuove la cartella dei sorgenti compilati.">
		<delete dir="${build}/classes" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-javadoc                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-javadoc"
	        description="Rimuove la cartella temporanea dei javadoc.">
		<delete dir="${build}/javadoc" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-jsp                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-jsp"
	        description="Rimuove la cartella temporanea delle jsp compilate.">
	<delete dir="${build}/jsp" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: _clean-web-inf                                   # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="_clean-web-inf"
	        description="Rimuove il contenuto di lib e classes della
	                     web application (per run locali).">
		<delete dir="${srcweb}/WEB-INF/classes" />
		<delete dir="${srcweb}/WEB-INF/lib" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: about                                             # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="about" description="Visualizza l'elenco dei target pubblici dello script.">
		<loadproperties srcfile="buildfiles/build.properties" />
		<loadfile property="about" srcfile="buildfiles/about.txt" />
		<echo message="${about}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: about-custom                                      # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="about-custom"
	        description="Visualizza l'elenco di tutti i target,
	                     pubblici e privati
	                     (equivalente a 'ant -projecthelp')" >

		<loadproperties srcfile="buildfiles/build.properties" />
		<loadfile property="about-custom" srcfile="buildfiles/about-custom.txt" />
		<echo message="${about-custom}" />
		<java classname="org.apache.tools.ant.Main">
			<arg value="-projecthelp" />
		</java>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: show-vars                                         # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="show-vars" depends="init"
	        description="Visualizza tutte le variabili impostate nei file di properties e/o da linea di comando">
		<echo message="*****************************************" />
		<echo message="********  ${componente} environment  *******" />
		<echo message="*****************************************" />
		<echoproperties />
		<echo />
		<echo />
		<echo message="*****************************************" />
		<echo message="********    java properties      ********" />
		<echo message="*****************************************" />
		<echoproperties prefix="java."/>
	</target>


	
	<target name="package-commons-moon-jar"  depends="compile-all"
				 description="Crea il jar con classe comuni utilizzate dai fruitori di moonsrv">
			<jar destfile="${build}/archives/${target}/${prodotto}-commons-${moon-commons-version}.jar"
				basedir="${build}/classes"
				includes="it/csi/moon/commons/**">
			</jar>
	
	</target>
	
	<target name="copy-commons-moon-jar" depends="package-commons-moon-jar" description="Copy lib moon-commons-X.Y.Z.jar MoonFO MoonBuilder MoonDirect MoonBODirect MoonBO Modulistica Buonispesa">
		<!-- MOOnFo -->
		<copy file="${build}/archives/${target}/${prodotto}-commons-${moon-commons-version}.jar"
			todir="${moonfobl.base.dir}/conf/lib-tmp" overwrite="true"/>
		<copy file="${build}/archives/${target}/${prodotto}-commons-${moon-commons-version}.jar"
			todir="${moonfobl.base.dir}/lib" overwrite="true"/>
		<!-- MOOnBuilder -->
		<copy file="${build}/archives/${target}/${prodotto}-commons-${moon-commons-version}.jar"
			todir="${moonbuilderbl.base.dir}/conf/lib-tmp" overwrite="true"/>
		<copy file="${build}/archives/${target}/${prodotto}-commons-${moon-commons-version}.jar"
			todir="${moonbuilderbl.base.dir}/lib" overwrite="true"/>
		<!-- MOOnDirect 
		<copy file="${build}/archives/${target}/${prodotto}-commons-${moon-commons-version}.jar"
			todir="${moondirectbl.base.dir}/conf/lib-tmp" overwrite="true"/>
		<copy file="${build}/archives/${target}/${prodotto}-commons-${moon-commons-version}.jar"
			todir="${moondirectbl.base.dir}/lib" overwrite="true"/>
		-->
		<!-- MOOnBODirect 
		<copy file="${build}/archives/${target}/${prodotto}-commons-${moon-commons-version}.jar"
			todir="${moonbodirectbl.base.dir}/conf/lib-tmp" overwrite="true"/>
		<copy file="${build}/archives/${target}/${prodotto}-commons-${moon-commons-version}.jar"
			todir="${moonbodirectbl.base.dir}/lib" overwrite="true"/>
		-->
		<!-- MOOnBO 
		<copy file="${build}/archives/${target}/${prodotto}-commons-${moon-commons-version}.jar"
			todir="${moonbobl.base.dir}/conf/lib-tmp" overwrite="true"/>
		<copy file="${build}/archives/${target}/${prodotto}-commons-${moon-commons-version}.jar"
			todir="${moonbobl.base.dir}/lib" overwrite="true"/>
		-->
		<!-- MOOn Modulistica -->
		<copy file="${build}/archives/${target}/${prodotto}-commons-${moon-commons-version}.jar"
			todir="${moonmodulistica.base.dir}/conf/lib-tmp" overwrite="true"/>
		<copy file="${build}/archives/${target}/${prodotto}-commons-${moon-commons-version}.jar"
			todir="${moonmodulistica.base.dir}/lib" overwrite="true"/>
		<!-- MOOn Buonispesa 
		<copy file="${build}/archives/${target}/${prodotto}-commons-${moon-commons-version}.jar"
			todir="${buonispesabl.base.dir}/conf/lib-tmp" overwrite="true"/>
		<copy file="${build}/archives/${target}/${prodotto}-commons-${moon-commons-version}.jar"
			todir="${buonispesabl.base.dir}/lib" overwrite="true"/>
		-->
	</target>	
	
	<taskdef resource="net/sf/antcontrib/antlib.xml"/>

	<!--PROTECTED REGION ID(R1519293945) ENABLED START-->
	<target name="echotime">
	    <tstamp>
	      <format property="TODAY_UK" pattern="yyyy-MM-dd HH:mm:ss:sss zzz" locale="cn,CN"/>
	    </tstamp>
	    <echo>Current system date/time is ${TODAY_UK}</echo>
	</target>
	<!--PROTECTED REGION END-->


	<!-- Define SonarScanner for Ant Target -->
	<target name="sonar" depends="compile-all" description="run SONAR analysis">
	    <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml"/>
	        <!-- Update the following line, or put the "sonarqube-ant-task-*.jar" file in your "$HOME/.ant/lib" folder 
	        <classpath path="C:/Program Files/apache-ant-1.10.9/lib/sonarqube-ant-task-2.7.0.1612.jar" />
	    </taskdef>-->
	 
	 	<!-- Define the SonarQube project properties -->
	 	<property name="sonar.host.url" value="http://localhost:9000" />
		<property name="sonar.projectKey" value="it.csi.moon.moonsrv:master" />
		<property name="sonar.projectName" value="moonsrv" />
		<property name="sonar.projectVersion" value="2.3.0" />
		
		<property name="sonar.sources" value="${src}/java" />
		<property name="sonar.java.binaries" value="${build}/classes" />
		<property name="sonar.java.libraries" value="lib/*.jar" />
	
	    <!-- Execute SonarScanner for Ant Analysis -->
	    <sonar:sonar xmlns:sonar="antlib:org.sonar.ant"/>
	</target>

</project>
