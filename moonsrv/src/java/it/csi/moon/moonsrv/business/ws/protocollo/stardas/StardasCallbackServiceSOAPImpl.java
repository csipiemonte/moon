/*
* SPDX-FileCopyrightText: (C) Copyright 2023 C.S.I. Piemonte
*
* SPDX-License-Identifier: EUPL-1.2 */

package it.csi.moon.moonsrv.business.ws.protocollo.stardas;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.Instant;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.context.support.SpringBeanAutowiringSupport;

import it.csi.moon.commons.dto.Azione;
import it.csi.moon.commons.dto.Istanza;
import it.csi.moon.commons.dto.UserInfo;
import it.csi.moon.commons.entity.AzioneEntity;
import it.csi.moon.commons.entity.IstanzaEntity;
import it.csi.moon.commons.entity.ModuloAttributoEntity;
import it.csi.moon.commons.entity.ProtocolloRichiestaEntity;
import it.csi.moon.commons.entity.ProtocolloRichiestaFilter;
import it.csi.moon.commons.entity.StoricoWorkflowEntity;
import it.csi.moon.commons.entity.WorkflowEntity;
import it.csi.moon.commons.entity.WorkflowFilter;
import it.csi.moon.commons.util.MapModuloAttributi;
import it.csi.moon.commons.util.ModuloAttributoKeys;
import it.csi.moon.commons.util.StrUtils;
import it.csi.moon.moonsrv.business.service.IstanzeService;
import it.csi.moon.moonsrv.business.service.WorkflowService;
import it.csi.moon.moonsrv.business.service.helper.task.SendEmailDichiaranteIstanzaTask;
import it.csi.moon.moonsrv.business.service.helper.task.WfAzioneIstanzaTask;
import it.csi.moon.moonsrv.business.service.impl.dao.ArchiviaDoquiRichiestaDAO;
import it.csi.moon.moonsrv.business.service.impl.dao.AzioneDAO;
import it.csi.moon.moonsrv.business.service.impl.dao.IstanzaDAO;
import it.csi.moon.moonsrv.business.service.impl.dao.ModuloAttributiDAO;
import it.csi.moon.moonsrv.business.service.impl.dao.ProtocolloRichiestaDAO;
import it.csi.moon.moonsrv.business.service.impl.dao.RepositoryFileDAO;
import it.csi.moon.moonsrv.business.service.impl.dao.StoricoWorkflowDAO;
import it.csi.moon.moonsrv.business.service.impl.dao.WorkflowDAO;
import it.csi.moon.moonsrv.business.ws.protocollo.stardas.type.InformazioneType;
import it.csi.moon.moonsrv.business.ws.protocollo.stardas.type.InformazioniAggiuntiveType;
import it.csi.moon.moonsrv.business.ws.protocollo.stardas.type.ResultType;
import it.csi.moon.moonsrv.exceptions.business.BusinessException;
import it.csi.moon.moonsrv.exceptions.business.ItemNotFoundBusinessException;
import it.csi.moon.moonsrv.util.LoggerAccessor;

/**
 * This class was generated by Apache CXF 3.3.2
 * 2020-06-16T15:55:01.630+02:00
 * Generated source version: 3.3.2
 *
 */

@javax.jws.WebService(
                      serviceName = "StardasCallbackService",
                      portName = "StardasCallbackServiceSOAP",
                      targetNamespace = "http://www.csi.it/stardas/services/StardasCallbackService",
                     // wsdlLocation = "file:/wsdl/stardas/StardasCallbackService.wsdl", // "file:conf/wsdl/...
                      endpointInterface = "it.csi.moon.moonsrv.business.ws.protocollo.stardas.StardasCallbackService")

public class StardasCallbackServiceSOAPImpl implements StardasCallbackService {

	private static final String CLASS_NAME = "StardasCallbackServiceSOAPImpl";
	private static final Logger LOG = LoggerAccessor.getLoggerBusiness();

	private static final String DATA_REG_PROTOCOLLO = "Data_reg_protocollo";		// es. 14/10/2020
	private static final String NUMERO_REG_PROTOCOLLO = "Numero_reg_protocollo";	// es. DB2000/00000159/2020
	private static final String ID_CLASSIFICAZIONE = "Id_classificazione";			// es. ClassificazionePropertiesType_130784
	private static final String OGGETTO_DOCUMENTO = "Oggetto_documento";			// es. Attivit√†  extra-lavorative DEMO DIPENDENTE2
	private static final String INDICE_CLASS_ESTESO = "Indice_class_esteso";		// es. C.arc, RP201209.e, Regione Piemonte - Agg. 09/2012.ra, Tit01RPGiunta.t, 14.v, 6/2020A/DB2000.fra, DB2000.arm, 2.sf, 56.nd

	private final DateFormat sdf_ddMMyyyy = new SimpleDateFormat("dd/MM/yyyy");
	private final SimpleDateFormat sdf_yyyyMMdd = new SimpleDateFormat("yyyy-MM-dd"); // For reponse WS
	
	@Autowired
	ProtocolloRichiestaDAO protocolloRichiestaDAO;
	@Autowired
	IstanzaDAO istanzaDAO;
	@Autowired
	AzioneDAO azioneDAO;
	@Autowired
	StoricoWorkflowDAO 	storicoWorkflowDAO;
	@Autowired
	WorkflowDAO workflowDAO;
	@Autowired
	WorkflowService workflowService;
	@Autowired
	IstanzeService istanzeService;
	@Autowired
	ModuloAttributiDAO moduloAttributiDAO;
	@Autowired
	ArchiviaDoquiRichiestaDAO archiviaDoquiRichiestaDAO;
	@Autowired
	RepositoryFileDAO repositoryFileDAO;
	
	public StardasCallbackServiceSOAPImpl() {
		try {
			LOG.debug("["+CLASS_NAME+"::StardasCallbackServiceSOAPImpl] BEGIN END");
			SpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(this);
		} catch (Exception e) {
			LOG.warn(e.getMessage());
		}
	}
	
    /* (non-Javadoc)
     * @see it.csi.moon.moonsrv.business.ws.protocollo.stardas.StardasCallbackService#esitoSmistaDocumento(it.csi.moon.moonsrv.business.ws.protocollo.stardas.EsitoSmistaDocumentoType esito, it.csi.moon.moonsrv.business.ws.protocollo.stardas.ResultType esito1)*
     */
    public void esitoSmistaDocumento(it.csi.moon.moonsrv.business.ws.protocollo.stardas.type.EsitoSmistaDocumentoType esito, javax.xml.ws.Holder<ResultType> response) {
    	LOG.info("["+CLASS_NAME+"::esitoSmistaDocumento] IN EsitoSmistaDocumentoType esito="+esito+"\nHolder<ResultType> response="+response);
        try {
        	/* 1. ricerco la richiesta in base a esito.getMessageUUID()
        	 * e aggiorno i dati di esito
        	 */
        	ProtocolloRichiestaFilter filter = new ProtocolloRichiestaFilter();
        	filter.setUuidProtocollatore(esito.getMessageUUID());
        	ProtocolloRichiestaEntity richiesta = new ProtocolloRichiestaEntity();

    		List<ProtocolloRichiestaEntity> elencoRichieste = protocolloRichiestaDAO.find(filter);
    		if (elencoRichieste == null || elencoRichieste.isEmpty()) {
    			// se non viene trovata la request in protocollo, cerca tra le richieste di archiviazione
    			elencoRichieste = archiviaDoquiRichiestaDAO.find(filter);
    			
    			if (elencoRichieste == null || elencoRichieste.isEmpty()) {
	    			LOG.error("["+CLASS_NAME+"::esitoSmistaDocumento] Richiesta non trovata per UUID = " + esito.getMessageUUID());
	    			response.value = newResultType("404","Richiesta non trovata");
	    			return;
    			}
    			/*
        		 * continua con la gestione dell'archiviazione
        		 */
    			richiesta = elencoRichieste.get(0);
    			richiesta.setCodiceEsito(esito.getEsitoTrattamento().getCodice());
                richiesta.setDescEsito(esito.getEsitoTrattamento().getMessaggio());
                if (esito.getInformazioniAggiuntive()!=null) {
                    richiesta.setNote(makeNote(esito));
                }
                if(LOG.isDebugEnabled()) {
                	LOG.debug("["+CLASS_NAME+"::esitoSmistaDocumento] Update...  richiesta archiviazione = "+richiesta);
                }
                archiviaDoquiRichiestaDAO.updateResponseByUuidProtocollatore(richiesta);
        		      
            	String numeroProtocollo = "ID-"+ richiesta.getUuidRichiesta().substring(0,15);
            	Date dataProtocollo = null;
            	istanzaDAO.updateProtocollo(richiesta.getIdIstanza(), numeroProtocollo, dataProtocollo);
    		}
    		
    		/*
    		 * continua con la gestione del protocollo
    		 */
			richiesta = elencoRichieste.get(0);
			richiesta.setCodiceEsito(esito.getEsitoTrattamento().getCodice());
            richiesta.setDescEsito(esito.getEsitoTrattamento().getMessaggio());
            if (esito.getInformazioniAggiuntive()!=null) {
                richiesta.setNote(makeNote(esito));
            }
            if(LOG.isDebugEnabled()) {
            	LOG.debug("["+CLASS_NAME+"::esitoSmistaDocumento] Update...  richiesta="+richiesta);
            }
			protocolloRichiestaDAO.updateResponseByUuidProtocollatore(richiesta);
    		      
        	String numeroProtocollo = "";
        	Date dataProtocollo = null;
        	if (esito.getEsitoTrattamento()!=null && "000".equals(esito.getEsitoTrattamento().getCodice())) {
				numeroProtocollo = extractNumeroProtocollo(esito.getInformazioniAggiuntive());
				dataProtocollo = extractDataProtocollo(esito.getInformazioniAggiuntive());
			}
        	if (StrUtils.isEmpty(numeroProtocollo)) {
        		LOG.info("["+CLASS_NAME+"::esitoSmistaDocumento] Numero di protocollo non valorizzato per UUID = " + esito.getMessageUUID());
        	} else {
	    		//
	            if (richiesta.getTipoIngUsc().intValue() == ProtocolloRichiestaEntity.TipoInOut.IN.getId())	{
	            	if (ProtocolloRichiestaEntity.TipoDoc.ISTANZA.isCorrect(richiesta)) {
	            		istanzaDAO.updateProtocollo(richiesta.getIdIstanza(), numeroProtocollo, dataProtocollo);
	            	}
	            	if (ProtocolloRichiestaEntity.TipoDoc.INTEGRAZIONE.isCorrect(richiesta)) {
	            		StoricoWorkflowEntity swIntegrazione = storicoWorkflowDAO.findStoricoWorkflowById(richiesta.getIdStoricoWorkflow());
	            		repositoryFileDAO.updateProtocollo(swIntegrazione.getIdFileRendering(), numeroProtocollo, dataProtocollo);
	            	}
	            	//
	            	Istanza istanza = istanzeService.getIstanzaById(richiesta.getIdIstanza());
	    			List<ModuloAttributoEntity> attributiModuloE = moduloAttributiDAO.findByIdModulo(richiesta.getIdModulo());
	    			MapModuloAttributi mapModuloAttributi = new MapModuloAttributi(attributiModuloE);
	    			//
	            	runSendEmailDichiarantePostProtocolloIfRequested(richiesta, istanza, mapModuloAttributi);
	            	runWfAzioneIstanzaPostProtocolloIfRequested(richiesta, istanza, mapModuloAttributi);
	            }
	            
				/* 3. se la richiesta di protocollo √® in uscita viene eseguita l'azione SALVA_PROTOCOLLO
				 *  
				 *  Questa azione si specializza in base al modulo
				 *  e dentro bisogna generare un cambio di stato e ricevuta ( i cui dati sono gi√† presenti nell'ultimo storico workflow)
				 *  e salvarlo su repositiry_file e storico_workflow
				 *  
				 */
	            if (richiesta.getTipoIngUsc().intValue() == ProtocolloRichiestaEntity.TipoInOut.OUT.getId()) {
	            	// salvo i dati_azione sul workflow azione salva_protocollo
	            	// compie l'azione salva_protocollo, per salvare i dati del protocollo nello storicoWorkflow
	            	UserInfo user = retrieveUserInfo();
	            	String codiceAzione = "SALVA_PROTOCOLLO";
	            	// Azione entity:
	    			AzioneEntity azioneEntity = azioneDAO.findByCd(codiceAzione);
	    			StoricoWorkflowEntity lastStoricoWf = storicoWorkflowDAO.findLastStorico(richiesta.getIdIstanza())
	    					.orElseThrow(ItemNotFoundBusinessException::new);
	    			IstanzaEntity istanza = istanzaDAO.findById(richiesta.getIdIstanza());
	    			
	    			// cerco i dati del passo di workflow che corrispondono all'azione salva_protocollo
	    			WorkflowFilter filterWf = new WorkflowFilter();
	    			filterWf.setIdModulo(istanza.getIdModulo());
	    			filterWf.setIdAzione(azioneEntity.getIdAzione());
	    			filterWf.setIdStatoWfPartenza(lastStoricoWf.getIdStatoWfArrivo());
	    			filterWf.setFlagApi("S");
	    			List<WorkflowEntity> elencoWorkflow = workflowDAO.find(filterWf);
	    			if (elencoWorkflow.isEmpty()) {
	    				LOG.debug("[" + CLASS_NAME + "::esitoSmistaDocumento] Nessun Workflow trovato per filter=" + filter);
	    				throw new BusinessException("");
	    			} else if (elencoWorkflow.size() > 1) {
	    				LOG.debug("[" + CLASS_NAME + "::esitoSmistaDocumento] Troppi Workflow trovati per filter=" + filter);
	    				throw new BusinessException("");
	    			}
	    			WorkflowEntity workflow = elencoWorkflow.get(0);
	    			
	            	Azione azione = new Azione();
	            	azione.setIdWorkflow(workflow.getIdWorkflow());
	        		String dataProtocolloStr = sdf_yyyyMMdd.format(dataProtocollo);
	        		
	            	String datiAzione = "{\"data\":{\"numeroProtocollo\":\""+numeroProtocollo + "\",\"dataProtocollo\":\"" + dataProtocolloStr +"\"}}";
	            	azione.setDatiAzione(datiAzione);
	            	Azione azioneCompiuta = workflowService.compieAzione(user, richiesta.getIdIstanza(), azione);
	            }
        	}
			
			// Response
			ResultType esitoResponse = new ResultType();
			esitoResponse.setCodice("000");
			esitoResponse.setMessaggio("Operazione completata con esito positivo");
			response.value = esitoResponse;
        } catch (java.lang.Exception e) {
			LOG.error("[" + CLASS_NAME + "::esitoSmistaDocumento] Exception: ", e);
            throw new RuntimeException(e);
        }
    }

	private ResultType newResultType(String codice, String messaggio) {
		ResultType result = new ResultType();
		result.setCodice(codice);
		result.setMessaggio(messaggio);
		return result;
	}

	private String makeNote(it.csi.moon.moonsrv.business.ws.protocollo.stardas.type.EsitoSmistaDocumentoType esito) {
		return esito.getInformazioniAggiuntive().getInformazione().stream()
				.sorted(Comparator.comparing(InformazioneType::getNome)) // ogni tanto da STARDAS arrivano in ordine diversi
				.map(i->i.getNome()+":"+i.getValore())
				.collect(Collectors.joining(";"));
	}

	private String extractNumeroProtocollo(InformazioniAggiuntiveType informazioniAggiuntive) {
		if (informazioniAggiuntive==null || informazioniAggiuntive.getInformazione()==null || informazioniAggiuntive.getInformazione().isEmpty()) return null;
		return informazioniAggiuntive.getInformazione().stream()
				.filter(ia -> ia.getNome().equals(NUMERO_REG_PROTOCOLLO))
				.map(ia -> ia.getValore())
				.findAny()
				.orElse(null);
	}

	private Date extractDataProtocollo(InformazioniAggiuntiveType informazioniAggiuntive) {
		String strDate = null;
		try {
			if (informazioniAggiuntive==null || informazioniAggiuntive.getInformazione()==null || informazioniAggiuntive.getInformazione().isEmpty()) return null;
			strDate = informazioniAggiuntive.getInformazione().stream()
				.filter(ia -> ia.getNome().equals(DATA_REG_PROTOCOLLO))
				.map(ia -> ia.getValore())
				.findAny()
				.orElse(null);

			Date result = strDate!=null?sdf_ddMMyyyy.parse(strDate):null;
			
			return result;
		} catch (ParseException e) {
			LOG.error("["+CLASS_NAME+"::esitoSmistaDocumento] ParseException  strDate="+strDate);
			return null;
		}
	}
	
	protected UserInfo retrieveUserInfo() throws BusinessException {
		try {
			UserInfo userInfo = new UserInfo();
			userInfo.setIdentificativoUtente("SYSTEM");
			
			return userInfo;
		} catch (Exception e) {
			throw new BusinessException();
		}
	}
	
	/**
	 * Metodo opzional : non torna Exception
	 * Invia email al dichiarante su callback di protocollazione
	 * @param richiesta di protocollazione
	 */
	private void runSendEmailDichiarantePostProtocolloIfRequested(ProtocolloRichiestaEntity richiesta, Istanza istanza, MapModuloAttributi mapModuloAttributi) {
        Instant start = java.time.Instant.now();
        String response = null;
        LOG.info("[" + CLASS_NAME + "::runSendEmailDichiarantePostProtocolloIfRequested] BEGIN Task...");
        try {
        	// Email
        	Boolean activated = mapModuloAttributi.getWithCorrectType(ModuloAttributoKeys.PCPT_IN_EMAIL);
    		if (Boolean.TRUE.equals(activated)) {
    			String conf = mapModuloAttributi.getWithCorrectType(ModuloAttributoKeys.PCPT_IN_EMAIL_CONF);
    			if (StringUtils.isNotEmpty(conf)) {
    				LOG.info("[" + CLASS_NAME + "::runSendEmailDichiarantePostProtocolloIfRequested] new runSendEmailDichiarantePostProtocolloIfRequested().call() ...");
    				response = new SendEmailDichiaranteIstanzaTask(istanza, conf, "postCallbackPrt").call();
    			} else {
    				LOG.error("[" + CLASS_NAME + "::runSendEmailDichiarantePostProtocolloIfRequested] attributo PCPT_IN_EMAIL_CONF mancante per il modulo " + istanza.getModulo().getIdModulo() + " " + istanza.getModulo().getCodiceModulo());
    			}
    		}
		} catch (Exception e) {
			LOG.error("[" + CLASS_NAME + "::runSendEmailDichiarantePostProtocolloIfRequested] Exception ", e);
//			throw new BusinessException();
		} finally {
	        Instant end = java.time.Instant.now();
	        Duration between = java.time.Duration.between(start, end);
	        LOG.info("[" + CLASS_NAME + "::runSendEmailDichiarantePostProtocolloIfRequested] END " + String.format("Completed Task in %02d:%02d.%04d  %s", between.toMinutes(), between.getSeconds(), between.toMillis(), response)); 
		}
	}
	
	public void runWfAzioneIstanzaPostProtocolloIfRequested(ProtocolloRichiestaEntity richiesta, Istanza istanza, MapModuloAttributi mapModuloAttributi) {
        Instant start = java.time.Instant.now();
        String response = null;
        LOG.info("[" + CLASS_NAME + "::runWfAzioneIstanzaPostProtocolloIfRequested] BEGIN Task...");
        try {
    		// Azione
    		// Gestione parametrica cambio di stato automatico in relazione alla configurazione delle azioni 
    		Boolean activated = mapModuloAttributi.getWithCorrectType(ModuloAttributoKeys.PCPT_AZIONE);
    		if (Boolean.TRUE.equals(activated)) {
    			String conf = mapModuloAttributi.getWithCorrectType(ModuloAttributoKeys.PCPT_AZIONE_CONF);
    			if (StringUtils.isNotEmpty(conf)) {
    				LOG.info("[" + CLASS_NAME + "::runWfAzioneIstanzaPostProtocolloIfRequested] new WFAzioneIstanzaTask().call() ...");
    				response = new WfAzioneIstanzaTask(UserInfo.ADMIN, istanza, conf).call();
    			} else {
    				LOG.error("[" + CLASS_NAME + "::runWfAzioneIstanzaPostProtocolloIfRequested] attributo PCPT_AZIONE_CONF mancante per il modulo " + (istanza.getModulo()==null?"":(istanza.getModulo().getIdModulo() + " " + istanza.getModulo().getCodiceModulo())));
    			}
    		}
		} catch (Exception e) {
			LOG.error("[" + CLASS_NAME + "::runWfAzioneIstanzaPostProtocolloIfRequested] Exception ", e);
//			throw new BusinessException();
		} finally {
	        Instant end = java.time.Instant.now();
	        Duration between = java.time.Duration.between(start, end);
	        LOG.info("[" + CLASS_NAME + "::runWfAzioneIstanzaPostProtocolloIfRequested] END " + String.format("Completed Task in %02d:%02d.%04d  %s", between.toMinutes(), between.getSeconds(), between.toMillis(), response)); 
		}
	}
	
}
